# vim: ft=ruby:sts=2:expandtab
lock '3.1.0'

#-----

set :keep_git, 0
set :relative_current_symlink, 1
set :a2restart, "/etc/init.d/apache2 restart"
set :a2status, "/etc/init.d/apache2 status"
set :skip_pull, 0

namespace :typo3 do

    #task :db_backup do
    #	on roles(:all) do
    #	end
    #end

    desc "install deployTYPO3 from github"
    task :install_deploytypo3 do

        set :skip_pull, 1

        on roles(:all) do
            execute "git clone https://github.com/Lingewoud/deployTYPO3.git #{fetch(:deploy_to)}"
            execute "cd #{fetch(:deploy_to)} && git checkout capistrano_version"
            execute "cd #{fetch(:deploy_to)} && /var/lib/gems/1.8/bin/bundle install"
        end

        print "deployTYPO3 has been installed"
    end

    desc "install deployTYPO3 from github"
    task :pull_deploytypo3 do

        if(fetch(:skip_pull)==0)
            on roles(:all) do
                execute "cd #{fetch(:deploy_to)} && git pull"
                execute "cd #{fetch(:deploy_to)} && /var/lib/gems/1.8/bin/bundle install"
            end
        end
        set :skip_pull, 1
    end

    desc "init a minimal site repo"
    task :init_site_repo do

        #mkdir dummy
        #touch
        #mkdir deploy
        #cp deploy/typo3.yml
        #cp dummy/typo3conf/localconf.php

        print "initial environment has been setup"
    end

    desc "Setup a new staged typo3 environment for the first time"
    task :setup_fase1 do
        on roles(:all) do
            execute "rm -Rf #{fetch(:deploy_to)}"
        end

        invoke 'typo3:install_deploytypo3'

        #create releases and shared
        invoke 'deploy:check'
        invoke 'deploy:updating'
        invoke 'typo3:current_relative_symlink'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
            execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
        end

        #if keep_git
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)}/current/ && git remote set-url origin #{fetch(:repo_url)}"
            execute "cd #{fetch(:deploy_to)}/current/ && mkdir deploy"
            execute "cd #{fetch(:deploy_to)} && cp config/typo3.sample.yml current/deploy/typo3.yml"
            execute "cd #{fetch(:deploy_to)} && cp config/gitignore current/.gitignore"
        end

        invoke 'typo3:upgrade_source'

        print "\ninitial environment has been setup to fase 1. edit current/deploy/typo3.yml\n"
        print "\nand populate current with the dummy\n"
    end

    desc "Setup a new staged typo3 environment when a it's already in model"
    task :setup_fase2 do
        on roles(:all) do
            execute "rm -Rf #{fetch(:deploy_to)}"
        end

        invoke 'typo3:install_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
            execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
        end

        #sync db and files

        invoke 'deploy'
        invoke 'typo3:current_relative_symlink'

        invoke 'typo3:upgrade_source'

        print "environment has been setup, you do need to sync from production"
    end

    desc "Setup a new staged typo3 environment when a it's already in model"
    task :setup_fase3 do
        on roles(:all) do
            execute "rm -Rf #{fetch(:deploy_to)}"
        end

        invoke 'typo3:install_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
            execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
        end

        invoke 'deploy'

        #sync db and files
        invoke 'typo3:sync_from_production'

        invoke 'typo3:current_relative_symlink'

        invoke 'typo3:upgrade_source'
    end

    desc 'merge with [remote_branch]'
    task :merge_with , :remotebranch do |t, args|

        invoke 'deploy'

        on roles(:all) do
            branch = args[:remotebranch]
            execute "cd #{fetch(:deploy_to)}/current && git remote set-url origin #{fetch(:repo_url)}"
            execute "cd #{fetch(:deploy_to)}/current && git stash"
            execute "cd #{fetch(:deploy_to)}/current && git fetch"
            execute "cd #{fetch(:deploy_to)}/current && git checkout #{branch}"
            execute "cd #{fetch(:deploy_to)}/current && git checkout master"
            execute "cd #{fetch(:deploy_to)}/current && git merge --strategy-option ours #{branch}"

            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_db_credentials"
            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_disable_extensions"
            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_extconf_settings"
            execute "cd #{fetch(:deploy_to)} && rake cap:run_file_searchreplace_updates"

            execute "cd #{fetch(:deploy_to)} && rake cap:flush_config_cache"
            execute 'sudo', fetch(:a2restart)
        end

        invoke 'typo3:db_migrate'
        invoke 'typo3:run_migrations'
        #invoke 'typo3:after_deploy' not working, why?
        invoke 'typo3:current_relative_symlink'
    end

    desc "sync db & files and then deploy. Typically for Continuous Integration"
    task :sync_n_deploy do

        invoke 'typo3:sync_from_production'
        invoke 'deploy'
        invoke 'typo3:flush_content_cache'
    end

    desc "Run site presuite rspecs"
    task :rspec_pre_suite do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake env:rspec_pre_suite"
        end
    end
    desc "Run site post browser rspecs"
    task :rspec_post_browser do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake env:rspec_post_browser"
        end
    end

    desc "flush content cache"
    task :flush_content_cache do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake env:truncate_cache_tables"
            execute "cd #{fetch(:deploy_to)} && rake env:truncate_session_tables"
            #execute "cd #{fetch(:deploy_to)} && rake env:flush_cache"
        end
    end

    desc "Make db & files in env. identical to production"
    task :sync_from_production do

        invoke 'typo3:pull_deploytypo3'

        on roles(:devtest,:syncfiles) do
            execute "cd #{fetch(:deploy_to)} && rake cap:sync_files_from_production"
        end
        on roles(:devtest,:syncdb) do
            execute "cd #{fetch(:deploy_to)} && rake cap:sync_db_from_production"
            execute "cd #{fetch(:deploy_to)} && rake cap:run_sql_updates"

            print "environment has been synced"
        end
    end

    desc "Upgrade source in env to latest minor version"
    task :upgrade_source do

        invoke 'typo3:pull_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake cap:update_typo3_source"
        end
        print "\nsource has been upgraded"
        print "\n\nWARNING: YOU MUST RUN THE UPGRADE SCRIPTS IN BACKEND\n\n"
    end

    desc "Migrate database (typo3 EM migrations)"
    task :db_migrate do

        invoke 'typo3:pull_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake cap:db_migrate"
        end
    end

    desc "Run migrations (sql migrations)"
    task :run_migrations do

        invoke 'typo3:pull_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake cap:run_migrations"
        end
    end


    desc "Show environment information"
    task :info do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake env:info"
        end
    end
    desc "Show last git commit"
    task :last_commit do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake cap:git_last_commit"
        end
    end


	task :current_relative_symlink do
        # when not in deploy latest ls releases/ -1 | sort -r | head -n 1
		on roles(:all) do
			execute "rm -f #{current_path}"
   			execute "cd #{fetch(:deploy_to)} && ln -s releases/#{File.basename release_path} current"
		end
	end

    task :after_deploy do

        invoke 'typo3:pull_deploytypo3'

        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_db_credentials"
            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_disable_extensions"
            execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_extconf_settings"
            execute "cd #{fetch(:deploy_to)} && rake cap:run_file_searchreplace_updates"
            execute "cd #{fetch(:deploy_to)} && rake cap:flush_config_cache"
        end

        invoke 'typo3:upgrade_source'
        invoke 'typo3:db_migrate'
        invoke 'typo3:run_migrations'

        on roles(:all) do
            execute 'sudo', fetch(:a2restart)
        end

        invoke 'typo3:current_relative_symlink'
    end
end

namespace :test do
    task :test_pre_setup do
        on roles(:all) do
            # test apache restart is allowed
            # test ssh access to live server is allowed
            # test stage is configured in typo3.yml
        end
    end

    task :test_post_setup do
        on roles(:all) do
        end
    end

    task :test_pre_deploy do
        #if production test if repo is dirty
        on roles(:all) do
        end
    end
    task :test_post_deploy do
        on roles(:all) do
            #test symlinks
            #test source version
            #test database connection
            #test chmods
            #test chowns
        end
    end

end

# -- OVERRIDES
# Save this file as lib/capistrano/tasks/git.cap
namespace :git do
    desc 'Copy repo to releases'
    task create_release: :'git:update' do
        on roles(:all) do
            with fetch(:git_environmental_variables) do
                within repo_path do
                    execute :git, :clone, '-b', fetch(:branch), '--recursive', '.', release_path
                end
            end
        end
    end

    desc 'pending commits since last release'
    task :pending do
        revline=''
        on roles :all do
            revline = capture("tail -n1 #{fetch(:deploy_to)}/revisions.log")
        end
        githash =revline.split("(at")[1].split(")")[0]

        system("git clone -n #{repo_url} /tmp/cap_pending")
        print `cd /tmp/cap_pending && git log #{githash}..HEAD`
        system("rm -Rf /tmp/cap_pending")
    end

    desc 'pending commits since [commithash]'
    task :pending_since , :commithash do |t, args|
        githash = args[:commithash]
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)}/current && git log #{githash}..HEAD"
        end
    end
end

namespace :deploy do

    desc "display last revision log line"
    task :last_revision do
        on roles(:all) do
            execute "cd #{fetch(:deploy_to)} && tail -n1 revisions.log"
        end
    end

    after :finishing, 'typo3:after_deploy'
end
