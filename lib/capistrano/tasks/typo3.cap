# vim: ft=ruby:sts=2:expandtab

# lock '3.1.0'
# require "pp"

#----- DEFAULT SETTINGS, OVERRIDE WHEN NEEDED

set :git_no_cache, 0
set :restart_webserver, "sudo /etc/init.d/apache2 restart"
set :bundle_executable, "/usr/bin/bundle"
set :rake_executable, "./bin/rake"
set :rake_mysql_exec_dir, "/usr/bin"
set :rake_php_executable, "/usr/bin/php"
set :t3_dont_upgrade_source, 0

#----- INTERNAL VARIABLES, DON'T CHANGE OR OVERRIDE THESE
set :hooks_before_suite_run, 0
set :install_or_update_rake_typo3_run, 0

namespace :typo3 do

  # Empty repository must exist in git remote.
  # This creates useable fresh skeleton for TYPO3
  #
  # From here:
  # - a new TYPO3 enviroment can be created
  # - an existing TYPO3 environment can be imported in this module
  desc "init a initial dev environment"
  task :init1_empty_dummy do

    invoke 'typo3:helper:rm_deploy_to'
    invoke 'typo3:hooks:before_suite'

    invoke 'deploy:check'
    invoke 'deploy:updating'
    invoke 'typo3:helper:setup_shared_typo3_dirs'
    invoke 'typo3:helper:current_relative_symlink'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)}/current/ && git remote set-url origin #{fetch(:repo_url)}"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/patches"
      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/patches/.keep"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/migrations"
      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/migrations/.keep"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p dummy/typo3conf/ext"
      execute "cd #{fetch(:deploy_to)}/current/ && touch dummy/typo3conf/ext/index.html"
    end

    invoke 'typo3:helper:create_gitignore'
    invoke 'typo3:helper:upgrade_source'
    print "initial environment has been setup"
  end

  #  desc "init step 2: install a fresh TYPO3 in the designated version"
  task :init2_install_typo3 do
    print "SORRY NOT YET IMPLEMENTED"
  end

  desc "init step 2: clone from extisting TYPO3 environment"
  task :init2_install_typo3 do

    print "\nNOTE: When this task fails most times there is a problem with your ssh authorized public keys\n\n"

    invoke 'typo3:hooks:before_suite'
    invoke 'typo3:sync_from_production'

    on roles(:all) do

      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/* #{fetch(:deploy_to)}/current/dummy/"
      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/.* #{fetch(:deploy_to)}/current/dummy/"
      execute "rsync -av --exclude ext --exclude *.log --exclude temp*  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ #{fetch(:deploy_to)}/current/dummy/typo3conf/"
      execute "rsync -avL  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ext/ #{fetch(:deploy_to)}/current/dummy/typo3conf/ext/"

      #TODO do git module magic
      #execute "cd #{fetch(:deploy_to)}/current && find `dummy/typo3conf/ext -name '.git'`"
    end

    invoke 'typo3:hooks:after_suite'
  end

  desc "Setup a new production environment. Manually sync content from old production"
  task :init3_setup_new_stage_no_sync do
    invoke 'typo3:helper:rm_deploy_to'
    invoke 'typo3:hooks:before_suite'
    invoke 'typo3:helper:setup_shared_typo3_dirs'
    invoke 'deploy'
    invoke('typo3:hooks:after_suite') #FIXME Only run it init3_setup_new_stage_no_sync is called
    print "environment has been setup, you do need to sync content from old production"
  end

  desc "Setup a new staged typo3 environment when a it's already in model"
  task :init3_setup_new_stage_sync do
    invoke 'typo3:helper:rm_deploy_to'
    invoke 'typo3:hooks:before_suite'
    invoke 'typo3:helper:setup_shared_typo3_dirs'
    invoke 'deploy'
    invoke 'typo3:sync_from_production' # SAME BUT THIS ONE
    invoke('typo3:hooks:after_suite')
  end

  desc 'merge with [remote_branch]'
  task :merge_with, :remotebranch do |t, args|

    invoke 'typo3:hooks:before_suite'
    invoke 'deploy'

    on roles(:all) do
      branch = args[:remotebranch]
      execute "cd #{fetch(:deploy_to)}/current && git remote set-url origin #{fetch(:repo_url)}"
      execute "cd #{fetch(:deploy_to)}/current && git stash"
      execute "cd #{fetch(:deploy_to)}/current && git fetch"
      execute "cd #{fetch(:deploy_to)}/current && git checkout #{branch}"
      execute "cd #{fetch(:deploy_to)}/current && git checkout master"
      execute "cd #{fetch(:deploy_to)}/current && git merge --strategy-option ours #{branch}"
    end

    invoke('typo3:hooks:after_suite')
  end

  desc "deploy the typo3 way"
  task :deploy do
    invoke 'typo3:hooks:before_suite'
    invoke 'deploy'
    invoke('typo3:hooks:after_suite')
  end

  desc "sync db & files and then deploy. Typically for Continuous Integration"
  task :sync_n_deploy do
    invoke 'typo3:hooks:before_suite'
    invoke 'typo3:sync_from_production'
    invoke 'deploy'
    invoke('typo3:hooks:after_suite')
  end

  #  desc "Run site presuite rspecs"
  task :rspec_pre_suite do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:rspec_pre_suite"
    end
  end

  # desc "Run site post browser rspecs"
  task :rspec_post_browser do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:rspec_post_browser"
    end
  end

  desc "Make db & files in env. identical to production"
  task :sync_from_production do
    invoke 'typo3:hooks:before_suite'
    invoke 'typo3:helper:sync_files_from_production'
    invoke 'typo3:helper:sync_db_from_production'
    invoke 'typo3:helper:flush_content_cache'
  end

  desc "Show environment information"
  task :info do
    invoke 'typo3:hooks:before_suite'
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:info"
    end
  end

  # Suite are large combined tasks like init3_setup_new_stage_sync
  # Suite hooks are run only one time per session
  namespace :hooks do

    task :before_suite do
      if(fetch(:hooks_before_suite_run)==0)

        set :hooks_before_suite_run, 1
        invoke 'typo3:helper:install_or_update_rake_typo3'
        invoke 'typo3:helper:create_typo3yaml'
        invoke 'typo3:helper:set_stage'
      end
    end

    task :after_deploy do
        invoke 'git:set_remote_url_no_cache'
    end

    task :after_suite do
      invoke 'typo3:helper:run_filesearchandreplace'
      invoke 'typo3:helper:update_localconf'
      invoke 'typo3:helper:upgrade_source'
      invoke 'typo3:helper:db_em_migrations'
      invoke 'typo3:helper:run_migrations'
      invoke 'typo3:helper:current_relative_symlink'
      invoke 'typo3:helper:restart_webserver'
    end
  end

  namespace :helper do

    task :sync_files_from_production do
      on roles(:devtest,:syncfiles) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:sync_files_from_production"
      end
    end

    task :sync_db_from_production do
      on roles(:devtest,:syncdb) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:sync_db_from_production"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_sql_updates"
      end
    end

    # Truncate tables with content cache
    task :flush_content_cache do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:truncate_cache_tables"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:truncate_session_tables"
      end
    end

    # remove deploy_to directory
    task :rm_deploy_to do
      on roles(:all) do
        execute "rm -Rf #{fetch(:deploy_to)}"
      end
    end

    # TODO move to typo3-rake?
    # create typo3 dirs in shared
    task :setup_shared_typo3_dirs do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
      end
    end

    # set stage
    task :set_stage do
      on roles(:all) do
        execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
      end
    end

    # install rake-typo3 from github
    task :install_or_update_rake_typo3 do

      if(fetch(:install_or_update_rake_typo3_run)==0)

        on roles(:all) do

          gitexist = capture "if [ -e '#{fetch(:deploy_to)}/.git/config' ]; then echo -n 'true'; fi"

          if(gitexist.chomp=='true')

            #remove old deployTYPO3 version
            remote = capture "cd #{fetch(:deploy_to)} && git remote -v"
            if remote.include?('deploy')
              print "removing old repository"
              execute "cd  #{fetch(:deploy_to)} && rm -Rf .bundle config docs lib log spec .gitignore .rspec .travis.yml CHANGELOG.md Gemfile Gemfile.lock README.md Rakefile.rb VERSION .git"
              execute "git clone https://github.com/Lingewoud/rake-typo3.git #{fetch(:deploy_to)}/.clone"
              execute "cd #{fetch(:deploy_to)}/.clone && mv ./* ../"
              execute "cd #{fetch(:deploy_to)}/.clone && mv .bundle .git .gitignore .rspec .travis.yml ../"
            end

            execute "cd #{fetch(:deploy_to)} && git pull"
            execute "cd #{fetch(:deploy_to)} && #{fetch(:bundle_executable)} install --binstubs"

          else
            execute "rm -Rf #{fetch(:deploy_to)}"
            execute "git clone https://github.com/Lingewoud/rake-typo3.git #{fetch(:deploy_to)}"
            execute "cd #{fetch(:deploy_to)} && #{fetch(:bundle_executable)} install --binstubs"
            print "rake-typo3 has been installed"
          end

          set :install_or_update_rake_typo3_run, 1

        end

      end
    end

    task :create_gitignore do
      on roles(:all) do

        ignorestring  = "
.DS_Store
._.DS_Store
*~
*.swp
*.swo
ENABLE_INSTALL_TOOL
VERSION
temp_CACHE*.php
deprecation_*.log
"

        contents = StringIO.new(ignorestring)
        upload! contents, "#{fetch(:deploy_to)}/current/.gitignore"
      end
    end

    task :create_typo3yaml do

      on roles(:all) do

        if(fetch(:t3_main_version))
          t3yaml = {}
          t3yaml['all'] = {}
          t3yaml['all']['TYPO3_MAIN_VERSION'] = fetch(:t3_main_version)
          t3yaml['all']['SYNCLIVE'] = {}
          t3yaml['all']['SYNCLIVE']['SYNCCMDS'] = fetch(:t3_live_sync)['filesync']
          t3yaml['all']['SYNCLIVE']['SSH_DB_SERVER'] = fetch(:t3_live_sync)['dbsync']['ssh_server']
          t3yaml['all']['SYNCLIVE']['SSH_DB_USER'] = fetch(:t3_live_sync)['dbsync']['ssh_user']
          t3yaml['all']['SYNCLIVE']['DB'] = fetch(:t3_live_sync)['dbsync']
          t3yaml['all']['MYSQLEXECDIR'] = fetch(:rake_mysql_exec_dir)
          t3yaml['all']['PHP_EXECUTABLE'] = fetch(:rake_php_executable)

          stage = fetch(:stage).to_s

          t3yaml[stage] = {}
          t3yaml[stage]['DB'] = {}
          t3yaml[stage]['DB']['dbname'] = fetch(:dbname)
          t3yaml[stage]['DB']['dbuser'] = fetch(:dbuser)
          t3yaml[stage]['DB']['dbpass'] = fetch(:dbpass)
          t3yaml[stage]['DB']['dbhost'] = fetch(:dbhost)

          t3yaml[stage]['SQL_UPDATES'] = fetch(:t3_sql_updates)
          t3yaml[stage]['TYPO3_CONF_VARS'] = fetch(:t3_conf_vars)
          t3yaml[stage]['TYPO3_CONF_VARS_EXT_EXTCONF'] = fetch(:t3_conf_vars_ext_extconf)
          t3yaml[stage]['TYPO3_SOURCE_PATCHES'] = fetch(:t3_source_patches)
          t3yaml[stage]['DISABLE_EXTENSIONS'] = fetch(:t3_disable_extensions)
          t3yaml[stage]['FILE_SEARCH_REPLACE'] = fetch(:t3_file_search_replace)

          contents = StringIO.new(t3yaml.to_yaml)
          upload! contents, "#{fetch(:deploy_to)}/typo3.yml"
        end

      end
    end

    # when not in deploy latest ls releases/ -1 | sort -r | head -n 1
    task :current_relative_symlink do
      on roles(:all) do
        execute "rm -f #{current_path}"
        execute "cd #{fetch(:deploy_to)} && ln -s releases/#{File.basename release_path} current"
      end
    end

    task :update_localconf do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_db_credentials"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_typo3conf_vars"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_disable_extensions"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_extconf_settings"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:flush_config_cache"
      end
    end

    # Migrate database (typo3 Extension Manager migrations)
    task :db_em_migrations do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:db_migrate"
      end
    end

    # Run search and replace
    task :run_filesearchandreplace do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_file_searchreplace_updates"
      end
    end

    # Specific environment migration sql's. E.g. rename all fe-users etc..
    # migrations should be placed in current/deploy/migrations/
    # Run migrations (sql migrations)
    task :run_migrations do

      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_migrations"
        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_sql_updates"
      end
    end

    #desc "Upgrade TYPO3 source in environment to latest minor version"
    task :upgrade_source do

      if(fetch(:t3_dont_upgrade_source)!=1)

        on roles(:all) do
          execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_typo3_source"
        end

        print "\nsource has been upgraded"
        print "\n\nWARNING: YOU MUST RUN THE UPGRADE SCRIPTS IN BACKEND\n\n"
      end
    end

    task :restart_webserver do
      on roles(:all) do
        execute fetch(:restart_webserver)
      end
    end

  end
end


namespace :test do
  task :test_pre_setup do
    on roles(:all) do
      # test apache restart is allowed
      # test ssh access to live server is allowed
      # test stage is configured in typo3.yml
    end
  end

  task :test_post_setup do
    on roles(:all) do
      # test if dummy index.php is readable, correctly linked
      # temp cache files are removed
    end
  end

  task :test_pre_deploy do
    #if production test if repo is dirty
    on roles(:all) do
    end
  end
  task :test_post_deploy do
    on roles(:all) do
      #test symlinks
      #test source version
      #test database connection
      #test chmods
      #test chowns
    end
  end
end
