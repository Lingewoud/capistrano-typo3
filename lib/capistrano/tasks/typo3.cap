# vim: ft=ruby:sts=2:expandtab

#----- DEFAULT SETTINGS, OVERRIDE WHEN NEEDED

set :debug, 0
set :git_no_cache, 0
set :restart_webserver, "sudo /etc/init.d/apache2 restart"
set :bundle_executable, "/usr/bin/bundle"
set :rake_executable, "./bin/rake"
set :rake_mysql_exec_dir, "/usr/bin"
set :rake_php_executable, "/usr/bin/php"
set :t3_dont_upgrade_source, 0
set :t3_alternative_source_url, nil
set :t3_main_version, '7.6'
set :typo3_v6_local_conf_path, File.join('current','dummy','typo3conf','LocalConfiguration.php')
set :t3_post_deployment_commands, []

#----- INTERNAL VARIABLES, DON'T CHANGE OR OVERRIDE THESE
set :hooks_before_suite_run, 0
set :install_or_update_rake_typo3_run, 0

namespace :typo3 do

  # Empty repository must exist in git remote.
  # This creates useable fresh skeleton for TYPO3
  #
  # From here:
  # - a new TYPO3 enviroment can be created
  # - an existing TYPO3 environment can be imported in this module
#  desc "init a initial EMPTY dev environment"
#  task :init1_empty_dummy do
#
#    invoke 'typo3:helper:rm_deploy_to'
#    invoke 'typo3:hooks:before_suite'
#
#    invoke 'deploy:check'
#    invoke 'deploy:updating'
#    invoke 'typo3:helper:setup_shared_typo3_dirs'
#    invoke 'typo3:helper:current_relative_symlink'
#
#    on roles(:all) do
#      execute "cd #{fetch(:deploy_to)}/current/ && git remote set-url origin #{fetch(:repo_url)}"
#      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/patches"
#      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/patches/.keep"
#      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/migrations"
#      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/migrations/.keep"
#      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p dummy/typo3conf/ext"
#      execute "cd #{fetch(:deploy_to)}/current/ && touch dummy/typo3conf/ext/index.html"
#    end
#
#    invoke 'typo3:helper:create_gitignore'
#    invoke 'typo3:helper:upgrade_source'
#    print "initial environment has been setup"
#  end

#  #  desc "init step 2: install a fresh TYPO3 in the designated version"
#  #task :init2_install_typo3 do
#  #  print "SORRY NOT YET IMPLEMENTED"
#  #end
#
#  desc "clone from extisting TYPO3 environment"
#  task :init_clone_from_flat_typo3 do
#
#    print "\nNOTE: When this task fails most times there is a problem with your ssh authorized public keys\n\n"
#
#    invoke 'typo3:hooks:before_suite'
#    invoke 'typo3:sync_from_production'
#
#    on roles(:all) do
#
#      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/* #{fetch(:deploy_to)}/current/dummy/"
#      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/.* #{fetch(:deploy_to)}/current/dummy/"
#      execute "rsync -av --exclude ext --exclude *.log --exclude temp*  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ #{fetch(:deploy_to)}/current/dummy/typo3conf/"
#      execute "rsync -avL  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ext/ #{fetch(:deploy_to)}/current/dummy/typo3conf/ext/"
#
#      #TODO do git module magic
#      #execute "cd #{fetch(:deploy_to)}/current && find `dummy/typo3conf/ext -name '.git'`"
#    end
#
#    invoke 'typo3:hooks:after_suite'
#  end

  desc "Setup a new production environment. Don't sync content from old production"
  task :setup_new_stage_no_sync do

    invoke 'typo3:helper:rm_deploy_to' #OKE
    invoke 'deploy' #OKE
    invoke 'typo3:helper:setup_shared_typo3_dirs' #OKE
    invoke 'typo3:helper:update_localconf' #OKE
    invoke 'typo3:helper:current_relative_symlink' #OKE
    invoke 'typo3:helper:restart_webserver' #OKE

    print "environment has been setup, you do need to sync content from old production"
  end

  desc "Setup a new staged typo3 environment when a it's already in model"
  task :setup_new_stage_sync do

    invoke 'typo3:helper:rm_deploy_to' #OKE
    invoke 'deploy' #OKE
    invoke 'typo3:helper:setup_shared_typo3_dirs' #OKE

    invoke 'typo3:content:sync_files_from_production' #OKE
    invoke 'typo3:content:sync_db_from_production' #OKE
    invoke 'typo3:content:flush_cache_in_db' #OKE
    invoke 'typo3:helper:update_localconf' #OKE
    invoke 'typo3:helper:current_relative_symlink' #OKE
    invoke 'typo3:helper:restart_webserver' #OKE

    #invoke 'typo3:helper:upgrade_source' #REMOVE #SKIP
    #invoke 'typo3:helper:run_filesearchandreplace' #PORT LATER #OR SKIP
    #invoke 'typo3:helper:db_em_migrations' #PORT LATER #OR SKIP
    #invoke 'typo3:helper:run_migrations' #PORT LATER #OR SKIP
  end

  desc "sync db & files and then deploy. Typically for Continuous Integration"
  task :sync_n_deploy do
    invoke 'deploy'
    invoke 'typo3:content:sync_files_from_production'
    invoke 'typo3:content:sync_db_from_production'
    invoke 'typo3:content:flush_cache_in_db'
    invoke 'typo3:helper:update_localconf'
    invoke 'typo3:helper:current_relative_symlink'
    invoke 'typo3:helper:restart_webserver'
  end

  desc "deploy the typo3 way"
  task :deploy do
    invoke 'deploy'
    invoke 'typo3:helper:update_localconf'
    invoke 'typo3:helper:current_relative_symlink'
    invoke 'typo3:helper:restart_webserver'
  end

  desc "Make db & files in env. identical to production"
  task :sync_from_production do
    invoke 'typo3:content:sync_files_from_production'
    invoke 'typo3:content:sync_db_from_production'
    invoke 'typo3:content:flush_cache_in_db'
  end

#  desc "Clear all db and file content and config cache"
#  task :clear_all_cache do
#    invoke 'typo3:helper:flush_content_cache'
#    on roles(:all) do
#      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:flush_cache"
#    end
#  end
#
#  #  desc "Run site presuite rspecs"
#  task :rspec_pre_suite do
#    on roles(:all) do
#      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:rspec_pre_suite"
#    end
#  end

#  # desc "Run site post browser rspecs"
#  task :rspec_post_browser do
#    on roles(:all) do
#      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:rspec_post_browser"
#    end
#  end


#  desc "Show environment information"
#  task :info do
#    invoke 'typo3:hooks:before_suite'
#    on roles(:all) do
#      execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} env:info"
#    end
#  end

  namespace :hooks do
    task :after_deploy do
        invoke 'git:set_remote_url_no_cache'
        invoke 'typo3:helper:execute_post_deployment_commands'
    end
  end

  namespace :content do
    desc 'sync files from production'
    task :sync_files_from_production do
      on roles(:allow_syncfiles) do
        if fetch(:t3_live_sync)['filesync']
          fetch(:t3_live_sync)['filesync'].each do |key,command|
            execute "cd #{fetch(:deploy_to)} && #{command}"
          end
        end
      end
    end

    desc 'sync database from production and run sql updates'
    task :sync_db_from_production do
      on roles(:allow_syncdatabase) do

        # DUMP DATABASE TO IMAGE
        execute <<DBSYNC1
          ssh #{fetch(:t3_live_sync)['dbsync']['ssh_user']}@#{fetch(:t3_live_sync)['dbsync']['ssh_server']} \
          'mysqldump -u#{fetch(:t3_live_sync)['dbsync']['dbuser']} \
          -h#{fetch(:t3_live_sync)['dbsync']['dbhost']} \
          -p#{fetch(:t3_live_sync)['dbsync']['dbpass']} \
          #{fetch(:t3_live_sync)['dbsync']['dbname']} > /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}'
DBSYNC1

        # COMPRESS IMAGE
        execute <<DBSYNC2
          ssh #{fetch(:t3_live_sync)['dbsync']['ssh_user']}@#{fetch(:t3_live_sync)['dbsync']['ssh_server']} \
          'gzip -f /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}'
DBSYNC2

        # TRANSFER IMAGE
        execute <<DBSYNC3
          scp #{fetch(:t3_live_sync)['dbsync']['ssh_user']}@#{fetch(:t3_live_sync)['dbsync']['ssh_server']}:/tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}.gz \
          /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}.gz
DBSYNC3

        # DECOMPRESS IMAGE
        execute <<DBSYNC4
          gunzip /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}.gz
DBSYNC4

        # IMPORT AND REMOVE IMAGE
        execute <<DBSYNC5
          mysql -u#{fetch(:dbuser)} -h#{fetch(:dbhost)} -p#{fetch(:dbpass)} #{fetch(:dbname)} < /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']} && \
          rm /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}
DBSYNC5

        # REMOVE IMAGE
        execute <<DBSYNC6
          ssh #{fetch(:t3_live_sync)['dbsync']['ssh_user']}@#{fetch(:t3_live_sync)['dbsync']['ssh_server']} \
          'rm /tmp/.captypo3dump-#{fetch(:t3_live_sync)['dbsync']['dbname']}'.gz
DBSYNC6
      end

      invoke 'typo3:content:sql_updates'

    end #ENDTASK

    desc 'run necessary sql queries for environment'
    task :sql_updates do
      on roles(:allow_syncdatabase) do
        if fetch(:t3_sql_updates)
          fetch(:t3_sql_updates).each do |command|
            execute DT3MySQL::mysql_execute(command)
          end
        end
      end
    end

    desc 'flush cache and session tables in database'
    task :flush_cache_in_db do
      on roles(:all) do

        all_current_tables = capture(DT3MySQL::show_tables).split("\n")

        cache_tables= %w(cache_extensions cache_hash cache_imagesizes cache_md5params cache_pages cache_pagesection cache_sys_dmail_stat cache_treelist cache_typo3temp_log cachingframework_cache_hash cachingframework_cache_hash_tags cachingframework_cache_pages cachingframework_cache_pages_tags cachingframework_cache_pagesection cachingframework_cache_pagesection_tags cf_cache_hash cf_cache_hash_tags cf_cache_pages cf_cache_pages_tags cf_cache_pagesection cf_cache_pagesection_tags cf_extbase_object cf_extbase_object_tags cf_extbase_reflection cf_extbase_reflection_tags cf_tt_news_cache cf_tt_news_cache_tags cf_tx_solr cf_tx_solr_tags tt_news_cache tt_news_cache_tags tx_realurl_chashcache tx_realurl_errorlog tx_realurl_pathcache tx_realurl_uniqalias tx_realurl_urldecodecache tx_realurl_urlencodecache tx_solr_cache tx_solr_cache_tags)

        cache_tables.each do |table|
          if all_current_tables.include?(table)
            execute DT3MySQL::truncate_table(table)
          end
        end

        session_tables=%w(be_sessions fe_session_data fe_sessions)
        session_tables.each do |table|
          if all_current_tables.include?(table)
            execute DT3MySQL::truncate_table(table)
          end
        end
      end

    end
  end

  namespace :vagrant do

    desc "setup new homestead vagrant machine for TYPO3 development"
    task "setup_machine" do
      invoke 'typo3:vagrant:check_branch'

      if `vagrant plugin list | grep vagrant-bind`.include? 'vagrant-bindfs'
        print "vagrant bindfs plugin is already installed\n"
      else
        sh "vagrant plugin install vagrant-bindfs"
      end

      ### DOWNLOAD TYPO3.Homestead
      unless File.exists? "Configuration/vagrant.yml"
        sh "mkdir -p Configuration"
        sh "cd Configuration && curl -O https://raw.githubusercontent.com/Tuurlijk/TYPO3.Homestead/master/Configuration/vagrant.yml"
      end

      unless File.exists? "Vagrantfile"
        sh "curl -O https://raw.githubusercontent.com/Tuurlijk/TYPO3.Homestead/master/Vagrantfile"
      end

      sh "curl https://raw.githubusercontent.com/Tuurlijk/TYPO3.Homestead/master/README.md > README-Homestead.md"
      sh "vagrant up"

      on roles(:all) do
        execute "sudo aptitude update"
        execute "sudo aptitude install ruby-dev make -y"
        execute "sudo gem install bundler"
      end

      invoke 'typo3:vagrant:set_no_site'
      invoke 'typo3:helper:restart_webserver'
    end

    desc "setup homestead"
    task "setup_site" do
      invoke 'typo3:vagrant:check_branch'

      on roles(:all) do
        execute "sudo mkdir -p /var/shared/fileadmin /var/shared/typo3temp /var/shared/uploads"
        execute "sudo chown -Rf vagrant.vagrant /var/shared/fileadmin /var/shared/typo3temp /var/shared/uploads"
        execute "sudo ln -s /var/www/local.typo3.org /var/current"
      end

      on roles(:all) do
        execute "sudo mysqladmin create #{fetch(:dbname)}"
      end

      invoke 'typo3:vagrant:fixknownhosts'
      invoke 'typo3:content:sync_db_from_production'
      invoke 'typo3:content:flush_cache_in_db'
      invoke 'typo3:helper:update_localconf'

      on roles(:all) do
        if fetch(:hs_default_upstream_php_engine)
          execute "sudo sed -i 's/set $upstream .*/set $upstream #{fetch(:hs_default_upstream_php_engine)};/g' /etc/nginx/sites-available/local.typo3.org.conf"
        end
        execute "sudo sed -i 's/root .*/root \"\\/var\\/www\\/local\\.typo3\\.org\\/dummy\\/\";/g' /etc/nginx/sites-available/local.typo3.org.conf"
      end

      invoke 'typo3:helper:restart_webserver'

      print <<MSG

    ----------------------------------------------------------------------
    The website seems to be succesfully installed in the Homestead Vagrant
    machine.

    Open the site at http://local.typo3.org"

    And live edit the website via the shortcut local.typo3.org in this
    directory
    ----------------------------------------------------------------------
MSG
    end

    desc "purge .vagrant files"
    task "purge_machine" do
      sh "vagrant destroy"
      sh "rm -f local.typo3.org"
      sh "rm -Rf .vagrant"
    end

    desc "purge homestead site and database"
    task "purge_site" do
      on roles(:all) do
        execute "sudo rm -Rf /var/shared/fileadmin /var/shared/typo3temp /var/shared/uploads"
        execute "sudo rm -f /var/current"

        begin
          execute "sudo mysqladmin -f drop #{fetch(:dbname)}"
        rescue
          print "DB did not exist\n"
        end
      end

      invoke 'typo3:vagrant:set_no_site'
      invoke 'typo3:helper:restart_webserver'
    end

    task "check_branch" do
      current_branch = `git branch | grep \\* | cut -d ' ' -f2`.strip
      if current_branch != fetch(:branch)
        raise "current branch differs from homestead.rb configuration.\n see config/deploy/homestead.rb\n\n Current branch:   #{current_branch}\n Homestead branch: #{fetch(:branch)} "
      end
    end

    task "fixknownhosts" do
      on roles(:all) do
        execute "ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no #{fetch(:t3_live_sync)['dbsync']['ssh_user']}@#{fetch(:t3_live_sync)['dbsync']['ssh_server']} uptime"
      end
    end

    task "set_no_site" do
      on roles(:all) do
        execute "sudo sed -i 's/root .*/root \"\\/var\\/\";/g' /etc/nginx/sites-available/local.typo3.org.conf"
        execute "sudo su -c 'echo \"THERE IS NO DIRECTORY local.typo3.org  ... YOU MAY WANT TO RUN cap homstead:setup_site\" > /var/index.php'"
      end
    end

  end

  namespace :helper do
    task :execute_post_deployment_commands do
      on roles(:all) do

        if fetch(:t3_post_deployment_commands)
          fetch(:t3_post_deployment_commands).each do |command|
            execute command
          end
        end
      end

    end #ENDTASK

    # remove deploy_to directory
    task :rm_deploy_to do
      on roles(:all) do
        execute "rm -Rf #{fetch(:deploy_to)}"
      end
    end

    # TODO move to typo3-rake?
    # create typo3 dirs in shared
    task :setup_shared_typo3_dirs do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
      end
    end

    task :create_gitignore do
      on roles(:all) do

        ignorestring  = "
.DS_Store
._.DS_Store
*~
*.swp
*.swo
ENABLE_INSTALL_TOOL
/VERSION
temp_CACHE*.php
deprecation_*.log
"
        contents = StringIO.new(ignorestring)
        upload! contents, "#{fetch(:deploy_to)}/current/.gitignore"
      end
    end

    # when not in deploy latest ls releases/ -1 | sort -r | head -n 1
    task :current_relative_symlink do
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && rm -f current"
        execute "cd #{fetch(:deploy_to)} && ln -s releases/`ls -1 releases/ | sort -r | head -n 1` current"
      end
    end

    desc "update LocalConf with correct db credentionals"
    task :update_localconf do

      on roles(:all) do

        execute "echo '<?php' > #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"

        if fetch(:t3_add_unsafe_trusted_host_pattern)
          execute "echo ' $GLOBALS[\"TYPO3_CONF_VARS\"][\"SYS\"][\"trustedHostsPattern\"] = \".*\";' >> #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"
        end

        if fetch(:t3_store_db_credentials_in_addionalconf)
          execute "echo ' $GLOBALS[\"TYPO3_CONF_VARS\"][\"DB\"][\"database\"] = \"#{fetch(:dbname)}\";' >> #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"
          execute "echo ' $GLOBALS[\"TYPO3_CONF_VARS\"][\"DB\"][\"host\"] = \"#{fetch(:dbhost)}\";' >> #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"
          execute "echo ' $GLOBALS[\"TYPO3_CONF_VARS\"][\"DB\"][\"password\"] = \"#{fetch(:dbpass)}\";' >> #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"
          execute "echo ' $GLOBALS[\"TYPO3_CONF_VARS\"][\"DB\"][\"username\"] = \"#{fetch(:dbuser)}\";' >> #{fetch(:deploy_to)}/current/dummy/typo3conf/AdditionalConfiguration.php"
        else
          cmd1 =Typo3Helper::make_set_localconf_database_settings_command(fetch(:dbname),fetch(:dbuser),fetch(:dbpass),fetch(:dbhost))
          execute "cd #{fetch(:deploy_to)} && #{cmd1}"

          cmd2 = "mv #{fetch(:typo3_v6_local_conf_path)}.tmp #{fetch(:typo3_v6_local_conf_path)}"
          execute "cd #{fetch(:deploy_to)} && #{cmd2}"
        end
      end

      on roles(:all) do
        #PORT LATER OR SKIP
        #execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_typo3conf_vars"

        #PORT LATER OR SKIP
        #execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_disable_extensions"

        #PORT LATER OR SKIP
        #execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:update_localconf_extconf_settings"

        #PORT LATER OR SKIP, SEEMS NOT NEEDED ANYMORE
        #execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:flush_config_cache" #EASY
        #system("rm -Rf current/dummy/typo3conf/temp_CACHED_*")
      end
    end

#    # Migrate database (typo3 Extension Manager migrations)
#    task :db_em_migrations do
#      on roles(:all) do
#        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:db_migrate"
#      end
#    end
#
#    # Run search and replace
#    task :run_filesearchandreplace do
#      on roles(:all) do
#        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_file_searchreplace_updates"
#      end
#    end

    # Specific environment migration sql's. E.g. rename all fe-users etc..
    # migrations should be placed in current/deploy/migrations/
    # Run migrations (sql migrations)
#    task :run_migrations do
#
#      on roles(:all) do
#        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_migrations"
#        execute "cd #{fetch(:deploy_to)} && #{fetch(:rake_executable)} cap:run_sql_updates"
#      end
#    end

    task :restart_webserver do
      on roles(:all) do
        execute fetch(:restart_webserver)
      end
    end

  end
end
