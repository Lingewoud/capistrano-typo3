# vim: ft=ruby:sts=2:expandtab
lock '3.1.0'
require "PP"

#-----

set :keep_git, 0
set :relative_current_symlink, 1
set :a2restart, "/etc/init.d/apache2 restart"
set :a2status, "/etc/init.d/apache2 status"
set :skip_pull, 0

namespace :typo3 do

  namespace :helper do

    # desc "remove deploy_to directory"
    task :rm_deploy_to do
      on roles(:all) do
        execute "rm -Rf #{fetch(:deploy_to)}"
      end
    end

    #build yaml file based on staged info
    task "create_typo3yaml" do 

      on roles(:all) do
        t3yaml = YAML::load_file('/tmp/typo3.yml') #Load

        t3yaml = {}
        t3yaml['all'] = {}
        t3yaml['all']['TYPO3_MAIN_VERSION'] = fetch(:t3_main_version)
        t3yaml['all']['SOURCEFORGE_MIRROR'] = fetch(:t3_sourceforge_mirror)
        t3yaml['all']['SYNCLIVE'] = {}
        t3yaml['all']['SYNCLIVE']['SYNCCMDS'] = fetch(:t3_live_sync)['filesync']
        t3yaml['all']['SYNCLIVE']['SSH_DB_SERVER'] = fetch(:t3_live_sync)['dbsync']['ssh_server']
        t3yaml['all']['SYNCLIVE']['SSH_DB_USER'] = fetch(:t3_live_sync)['dbsync']['ssh_user']
        t3yaml['all']['SYNCLIVE']['DB'] = fetch(:t3_live_sync)['dbsync']

        stage = fetch(:stage).to_s

        t3yaml[stage] = {}
        t3yaml[stage]['DB'] = {}
        t3yaml[stage]['DB']['dbname'] = fetch(:dbname)
        t3yaml[stage]['DB']['dbuser'] = fetch(:dbuser)
        t3yaml[stage]['DB']['dbpass'] = fetch(:dbpass)
        t3yaml[stage]['DB']['dbhost'] = fetch(:dbhost)

        t3yaml[stage]['SQL_UPDATES'] = fetch(:t3_sql_updates)
        t3yaml[stage]['TYPO3_CONF_VARS_EXT_EXTCONF'] = fetch(:t3_conf_vars_ext_extconf)
        t3yaml[stage]['TYPO3_SOURCE_PATCHES'] = fetch(:t3_source_patches)
        t3yaml[stage]['DISABLE_EXTENSIONS'] = fetch(:t3_disable_extensions)
        t3yaml[stage]['FILE_SEARCH_REPLACE'] = fetch(:t3_file_search_replace)

        contents = StringIO.new(t3yaml.to_yaml)
        upload! contents, "#{fetch(:deploy_to)}/typo3.yml"

      end
    end
  end

#  desc "install deployTYPO3 from github"
  task :install_deploytypo3 do

    set :skip_pull, 1

    on roles(:all) do
      execute "git clone https://github.com/Lingewoud/deployTYPO3.git #{fetch(:deploy_to)}"
      execute "cd #{fetch(:deploy_to)} && git checkout capistrano_version"
      execute "cd #{fetch(:deploy_to)} && /var/lib/gems/1.8/bin/bundle install"
    end

    print "deployTYPO3 has been installed"
  end

#  desc "install deployTYPO3 from github"
  task :pull_deploytypo3 do

    if(fetch(:skip_pull)==0)
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && git pull"
        execute "cd #{fetch(:deploy_to)} && /var/lib/gems/1.8/bin/bundle install"
      end
    end
    set :skip_pull, 1
  end

  # Empty repository must exist in git remote.
  # This creates useable fresh skeleton for TYPO3
  #
  # From here:
  # - a new TYPO3 enviroment can be created
  # - an existing TYPO3 environment can be imported in this module
  desc "init a initial dev environment"
  task :init1_empty_dummy do

    invoke 'typo3:helper:rm_deploy_to'
    invoke 'typo3:install_deploytypo3'
    invoke 'deploy:check'
    invoke 'deploy:updating'
    invoke 'typo3:current_relative_symlink'
    invoke 'typo3:helper:create_typo3yaml'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
      execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
      execute "cd #{fetch(:deploy_to)}/current/ && git remote set-url origin #{fetch(:repo_url)}"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/patches"
      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/patches/.keep"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/migrations"
      execute "cd #{fetch(:deploy_to)}/current/ && touch deploy/migrations/.keep"
      execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p dummy/typo3conf/ext"
      execute "cd #{fetch(:deploy_to)}/current/ && touch dummy/typo3conf/ext/index.html"
      execute "cd #{fetch(:deploy_to)} && cp config/gitignore current/.gitignore"
    end

    invoke 'typo3:upgrade_source'
    print "initial environment has been setup"
  end

#  desc "init step 2: install a fresh TYPO3 in the designated version"
  task :init2_install_typo3 do
    print "SORRY NOT YET IMPLEMENTED"
  end

  desc "init step 2: clone from extisting TYPO3 environment"
  task :init2_install_typo3 do

    print "\nNOTE: When this task fails most times there is a problem with your ssh authorized public keys\n\n"

    invoke 'typo3:sync_from_production'

    on roles(:all) do

      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/* #{fetch(:deploy_to)}/current/dummy/"
      execute "rsync -v #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/.* #{fetch(:deploy_to)}/current/dummy/"
      execute "rsync -av --exclude ext --exclude *.log --exclude temp*  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ #{fetch(:deploy_to)}/current/dummy/typo3conf/"
      execute "rsync -avL  #{fetch(:t3_clone_original)[:ssh_user]}@#{fetch(:t3_clone_original)[:ssh_host]}:#{fetch(:t3_clone_original)[:dummy_root]}/typo3conf/ext/ #{fetch(:deploy_to)}/current/dummy/typo3conf/ext/"

      execute "cd #{fetch(:deploy_to)}/current && find `dummy/typo3conf/ext -name '.git'`"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_db_credentials"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_disable_extensions"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_extconf_settings"
      execute "cd #{fetch(:deploy_to)} && rake cap:run_file_searchreplace_updates"
    end
  end

  desc "Setup a new production environment. Manually sync content from old production"
  task :init3_setup_new_stage_no_sync do
    on roles(:all) do
      execute "rm -Rf #{fetch(:deploy_to)}"
    end

    invoke 'typo3:install_deploytypo3'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
      execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
    end

    invoke 'deploy'
    invoke 'typo3:current_relative_symlink'

    invoke 'typo3:upgrade_source'

    print "environment has been setup, you do need to sync from old production"
  end

  desc "Setup a new staged typo3 environment when a it's already in model"
  task :init3_setup_new_stage_sync do
    on roles(:all) do
      execute "rm -Rf #{fetch(:deploy_to)}"
    end

    invoke 'typo3:install_deploytypo3'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
      execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
    end

    invoke 'deploy'

    #sync db and files
    invoke 'typo3:sync_from_production'

    invoke 'typo3:current_relative_symlink'

    invoke 'typo3:upgrade_source'
  end

  desc 'merge with [remote_branch]'
  task :merge_with , :remotebranch do |t, args|

    invoke 'deploy'

    on roles(:all) do
      branch = args[:remotebranch]
      execute "cd #{fetch(:deploy_to)}/current && git remote set-url origin #{fetch(:repo_url)}"
      execute "cd #{fetch(:deploy_to)}/current && git stash"
      execute "cd #{fetch(:deploy_to)}/current && git fetch"
      execute "cd #{fetch(:deploy_to)}/current && git checkout #{branch}"
      execute "cd #{fetch(:deploy_to)}/current && git checkout master"
      execute "cd #{fetch(:deploy_to)}/current && git merge --strategy-option ours #{branch}"

      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_db_credentials"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_disable_extensions"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_extconf_settings"
      execute "cd #{fetch(:deploy_to)} && rake cap:run_file_searchreplace_updates"

      execute "cd #{fetch(:deploy_to)} && rake cap:flush_config_cache"
      execute 'sudo', fetch(:a2restart)
    end

    invoke 'typo3:db_migrate'
    invoke 'typo3:run_migrations'
    #invoke 'typo3:after_deploy' not working, why?
    invoke 'typo3:current_relative_symlink'
  end

  desc "sync db & files and then deploy. Typically for Continuous Integration"
  task :sync_n_deploy do

    invoke 'typo3:sync_from_production'
    invoke 'deploy'
    invoke 'typo3:flush_content_cache'
  end

#  desc "Run site presuite rspecs"
  task :rspec_pre_suite do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake env:rspec_pre_suite"
    end
  end

 # desc "Run site post browser rspecs"
  task :rspec_post_browser do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake env:rspec_post_browser"
    end
  end

 # desc "flush content cache"
  task :flush_content_cache do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake env:truncate_cache_tables"
      execute "cd #{fetch(:deploy_to)} && rake env:truncate_session_tables"
      #execute "cd #{fetch(:deploy_to)} && rake env:flush_cache"
    end
  end

  desc "Make db & files in env. identical to production"
  task :sync_from_production do

    invoke 'typo3:pull_deploytypo3'

    on roles(:devtest,:syncfiles) do
      execute "cd #{fetch(:deploy_to)} && rake cap:sync_files_from_production"
    end
    on roles(:devtest,:syncdb) do
      execute "cd #{fetch(:deploy_to)} && rake cap:sync_db_from_production"
      execute "cd #{fetch(:deploy_to)} && rake cap:run_sql_updates"

      print "environment has been synced"
    end
  end

  desc "Upgrade source in env to latest minor version"
  task :upgrade_source do

    invoke 'typo3:pull_deploytypo3'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake cap:update_typo3_source"
      execute "cd #{fetch(:deploy_to)} && rake cap:link_source"
      execute "cd #{fetch(:deploy_to)} && rake cap:link_source_insides"
      execute "cd #{fetch(:deploy_to)} && rake cap:link_shared_dirs"
    end

    print "\nsource has been upgraded"
    print "\n\nWARNING: YOU MUST RUN THE UPGRADE SCRIPTS IN BACKEND\n\n"
  end

  desc "Show environment information"
  task :info do
    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake env:info"
    end
  end


  ## Migrate typo3 schemas, e.g. after version update
  #desc "Migrate database (typo3 EM migrations)"
  task :db_migrate do

    invoke 'typo3:pull_deploytypo3'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake cap:db_migrate"
    end
  end

  ## Specific environment migration sql's. E.g. rename all fe-users etc..
  ## migrations should be placed in current/deploy/migrations/
  #desc "Run migrations (sql migrations)"
  task :run_migrations do

    invoke 'typo3:pull_deploytypo3'

    on roles(:all) do
      #execute "cd #{fetch(:deploy_to)} && rake cap:run_migrations"
    end
  end


  task :current_relative_symlink do
    # when not in deploy latest ls releases/ -1 | sort -r | head -n 1
    on roles(:all) do
      execute "rm -f #{current_path}"
      execute "cd #{fetch(:deploy_to)} && ln -s releases/#{File.basename release_path} current"
    end
  end

  task :after_deploy do
    invoke 'typo3:pull_deploytypo3'

    on roles(:all) do
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_db_credentials"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_disable_extensions"
      execute "cd #{fetch(:deploy_to)} && rake cap:update_localconf_extconf_settings"
      execute "cd #{fetch(:deploy_to)} && rake cap:run_file_searchreplace_updates"
      execute "cd #{fetch(:deploy_to)} && rake cap:flush_config_cache"
    end

    invoke 'typo3:upgrade_source'
    invoke 'typo3:db_migrate'
    invoke 'typo3:run_migrations'

    on roles(:all) do
      execute 'sudo', fetch(:a2restart)
    end

    invoke 'typo3:current_relative_symlink'
  end
end

namespace :test do
  task :test_pre_setup do
    on roles(:all) do
      # test apache restart is allowed
      # test ssh access to live server is allowed
      # test stage is configured in typo3.yml
    end
  end

  task :test_post_setup do
    on roles(:all) do
      # test if dummy index.php is readable, correctly linked
    end
  end

  task :test_pre_deploy do
    #if production test if repo is dirty
    on roles(:all) do
    end
  end
  task :test_post_deploy do
    on roles(:all) do
      #test symlinks
      #test source version
      #test database connection
      #test chmods
      #test chowns
    end
  end

  namespace :depreciated do
    #desc "Setup a new staged typo3 environment for the first time"
    task :setup_fase1 do
      on roles(:all) do
        execute "rm -Rf #{fetch(:deploy_to)}"
      end

      invoke 'typo3:install_deploytypo3'

      #create releases and shared
      invoke 'deploy:check'
      invoke 'deploy:updating'
      invoke 'typo3:current_relative_symlink'

      on roles(:all) do
        execute "cd #{fetch(:deploy_to)} && mkdir -p shared/fileadmin shared/typo3temp shared/uploads"
        execute "echo '#{fetch(:stage).to_s}' > #{fetch(:deploy_to)}/STAGE"
      end

      #if keep_git
      on roles(:all) do
        execute "cd #{fetch(:deploy_to)}/current/ && git remote set-url origin #{fetch(:repo_url)}"
        execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/patches"
        execute "cd #{fetch(:deploy_to)}/current/ && mkdir -p deploy/migrations"
        execute "cd #{fetch(:deploy_to)} && cp config/typo3.sample.yml current/deploy/typo3.yml"
        execute "cd #{fetch(:deploy_to)} && cp config/gitignore current/.gitignore"
      end

      invoke 'typo3:upgrade_source'

      print "\ninitial environment has been setup to fase 1. edit current/deploy/typo3.yml\n"
      print "\nand populate current with the dummy\n"
    end
  end



end




